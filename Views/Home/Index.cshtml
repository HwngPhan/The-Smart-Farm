@model List<TSF_mustidisProj.Models.FeedModel>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="~/css/styles.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <title>FARMING</title>
</head>
<body>
    <nav class="navbar navbar-expand-lg d-lg-none fixed-top" style="background-color: #F1F0E9;">
    <div class="container-fluid">
      <div class="d-flex align-items-center">
        <img src="../images/images.jpg" class="rounded-circle me-2" width="40" height="40">
        <span class="navbar-brand">Username</span>
      </div>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mobileNavbar">
        <i class="bi bi-list"></i>
      </button>
      <div class="collapse navbar-collapse" id="mobileNavbar">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <a class="nav-link" href="#home">
              <div class="nav-icon"><i class="bi bi-house"></i></div>
              <span>Home</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#home">
              <div class="nav-icon"><i class="bi bi-geo-alt"></i></div>
              <span>Profile</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#home">
              <div class="nav-icon"><i class="bi bi-bar-chart"></i></div>
              <span>Stats</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#home">
              <div class="nav-icon"><i class="bi bi-list"></i></div>
              <span>Menu</span>
            </a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#home">
              <i class="bi bi-question-circle me-2"></i>
              Need help
            </a>
          </li>
        </ul>
      </div>
    </div>
  </nav>

  <!-- Desktop Sidebar (Hidden on mobile) -->
  <div class="sidebar d-none d-lg-block">
    <div class="user-profile">
      <img src="https://avatars.githubusercontent.com/u/123962141?v=4" alt="Khanhs">
      <div>The Smart Farm</div>
    </div>
    <ul class="nav flex-column">
      <li class="nav-item">
        <a class="nav-link" href="#home">
          <div class="nav-icon"><i class="bi bi-house"></i></div>
          <span>Home</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#home">
          <div class="nav-icon"><i class="bi bi-geo-alt"></i></div>
          <span>Profile</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#home">
          <div class="nav-icon"><i class="bi bi-bar-chart"></i></div>
          <span>Statistics</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#home">
          <div class="nav-icon"><i class="bi bi-list"></i></div>
          <span>Menu</span>
        </a>
      </li>
      <li class="nav-item mt-auto">
        <a class="nav-link" href="#home">
          <i class="bi bi-question-circle me-2"></i>
          Need help
        </a>
      </li>
    </ul>
  </div>

  <!-- Main Content -->
  <main class="main-content">
    <h4>THE SMART FARM</h4>
    <div class="status_box_total"></div>
    <div class="container mt-5" style="display: flex; justify-content: space-around;">
      <div class="card shadow-lg" style="width: 33%;">
        <div class="card-header text-white border-0 status_box">
          <h3 class="mb-0" style="text-align: center;">Soil Moisture</h3>
        </div>
        <div class="card-body p-4 status_box_ele">
          <div class="progress-container">
            <!-- First bar (100%) - Purple/Blue -->
            <div class="progress-item bar-3">
              <div class="progress-bar-vertical">
                <div id="soil-current-bar" class="progress-bar-fill" style="height: 70%;">
                  <div id="soil-current-val" class="percentage-text" style="bottom: 50%;">70%</div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Current</div>
            </div>

            <!-- Second bar (75%) - Green/Teal -->
            <div class="progress-item bar-2">
              <div class="progress-bar-vertical">
                <div id="soil-minimum-bar" class="progress-bar-fill" style="height: 20%;">
                  <div id="soil-minimum-val" class="percentage-text" style="bottom: 50%;">20%</div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Threshold</div>
            </div>

            <!-- Third bar (50%) - Orange/Red -->
            <!-- <div class="progress-item bar-1">
              <div class="progress-bar-vertical">
                <div class="progress-bar-fill" style="height: 80%;">
                  <div class="percentage-text" style="bottom: 50%;">80%</div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Maximum</div>
            </div> -->

          </div>
        </div>
      </div>
      <div class="card shadow-lg" style="width: 33%;">
        <div class="card-header text-white border-0 status_box">
          <h3 class="mb-0" style="text-align: center;">Air</h3>
        </div>
        <div class="card-body p-4 status_box_ele">
          <div class="progress-container">
            <!-- First bar (100%) - Purple/Blue -->
            <div class="progress-item bar-3">
              <div class="progress-bar-vertical">
                <div id="temp-bar" class="progress-bar-fill" style="height: 70%;">
                  <div id ="temp-val" class="percentage-text" style="bottom: 50%;"></div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Temperature</div>
            </div>

            <div class="progress-item bar-2">
              <div class="progress-bar-vertical">
                <div id="moisture-bar" class="progress-bar-fill" style="height: 50%;">
                  <div id="moisture-val" class="percentage-text" style="bottom: 50%;">50%</div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Humidity</div>
            </div>

           
            <!-- <div class="progress-item bar-2">
              <div class="progress-bar-vertical">
                <div class="progress-bar-fill" style="height: 50%;">
                  <div class="percentage-text" style="bottom: 50%;">50%</div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Halfway</div>
            </div>

            
            <div class="progress-item bar-1">
              <div class="progress-bar-vertical">
                <div class="progress-bar-fill" style="height: 50%;">
                  <div class="percentage-text" style="bottom: 50%;">50%</div>
                </div>
              </div>
              <div class="progress-label status_box_ele_text">Halfway</div>
            </div> -->

          </div>
        </div>
      </div>
    </div>
    </div>


    <div class="action_infor">
      <h4>Quick action and information</h4>

      <div class="action_box_total">
        <!-- Water box -->
        <div class="action_box_ele_temperature">
          <div class="action_box_ele_icon_temper">
              <i class="bi bi-water" style="font-size: 2rem;"></i>
              <p>Pump</p>
          </div>

          <label class="switch">
              <input type="checkbox" id="pumpToggle" onchange="sendDataPump(this.checked)"/>
              <span class="slider round"></span>
          </label>
        </div>


        <div class="action_box_ele_temperature">
          <div class="action_box_ele_icon_temper">
              <i class="bi bi-water" style="font-size: 2rem;"></i>
              <p>Automatic Pump</p>
          </div>

          <label class="switch">
              <input type="checkbox" id="autopumpToggle" onchange="sendDataPumpAuto(this.checked)"/>
              <span class="slider round"></span>
          </label>
        </div>

      </div>
    </div>


    <div class="action_infor">
      <div class="action_box_total">
        <div class="action_box_ele_temperature">
          <div class="action_box_ele_icon_temper">
              <i class="bi bi-lightbulb" style="font-size: 2rem;"></i>
              <p>Light</p>
          </div>

          <label class="switch">
              <input type="checkbox" id="lightToggle" onchange="sendDataLight(this.checked)"/>
              <span class="slider round"></span>
          </label>
        </div>

        <div class="action_box_ele_temperature">
          <div class="action_box_ele_icon_temper">
            <i class="bi bi-cloud-haze2" style="font-size: 2rem;"></i>
            <p>Moisture Threshold</p>
          </div>

          <div class="progress-container temperature_container">
            <form id="publishForm" action="" method="post">
                <input type="number" id="publishMessage" name="min-moi" placeholder="...">
                <!-- <button type="submit" class="btn btn-success">Publish</button> -->
            </form> 
          </div>
        </div>
      </div>
    </div>  
  </main>

  <!-- Bootstrap JS Bundle with Popper -->
  <script>
    let lastValues = @Html.Raw(Json.Serialize(Model.Select(m => m.LastValue)));
    let temperature = lastValues[0];
    let moisture = lastValues[1];
    let lightintensity = lastValues[2];
    let lights = lastValues[3];
    let pumps = lastValues[4];
    let soimoi = lastValues[5];
    let autopump = lastValues[6];
    let soimoilimit = lastValues[7];

    if (lights == "ON") {
        document.getElementById("lightToggle").checked = false;
    } else {
        document.getElementById("lightToggle").checked = true;
    }
    if (pumps == "ON") {
        document.getElementById("pumpToggle").checked = false;
    } else {
        document.getElementById("pumpToggle").checked = true;
    }
    if (autopump == "ON") {
        document.getElementById("autopumpToggle").checked = false;
    } else {
        document.getElementById("autopumpToggle").checked = true;
    }

    function updateTempGauge(temp) {
        const fillLevel = document.getElementById("temp-bar");
        const Text = document.getElementById("temp-val");

        fillLevel.style.height = temp*2 + "%";
        Text.textContent = temp;
      }

    function updateSoilCurrentGauge(val) {
        const fillLevel = document.getElementById("soil-current-bar");
        const Text = document.getElementById("soil-current-val");

        fillLevel.style.height = val + "%";
        Text.textContent = val;
      }

    function updateSoilMinimumGauge(val) {
        const fillLevel = document.getElementById("soil-minimum-bar");
        const Text = document.getElementById("soil-minimum-val");

        fillLevel.style.height = val + "%";
        Text.textContent = val;
      }
    
    function updateMoistureGauge(val) {
        const fillLevel = document.getElementById("moisture-bar");
        const Text = document.getElementById("moisture-val");

        fillLevel.style.height = val + "%";
        Text.textContent = val;
      }
    updateTempGauge(temperature);
    updateSoilCurrentGauge(soimoi);
    updateSoilMinimumGauge(soimoilimit);
    updateMoistureGauge(moisture);


    // Only target .progress-water bars
    document.querySelectorAll('.progress-water .progress-bar-vertical').forEach(container => {
      container.addEventListener('click', function (e) {
        const rect = this.getBoundingClientRect();
        const clickY = e.clientY - rect.top;
        const height = rect.height;

        // Calculate from bottom up
        const percentage = Math.round(100 - (clickY / height) * 100);
        const clamped = Math.max(0, Math.min(percentage, 100));

        // Update fill
        const fill = this.querySelector('.progress-bar-fill');
        fill.style.height = clamped + '%';

        // Optional: update label inside bar
        let label = fill.querySelector('.percentage-text');
        if (label) {
          label.textContent = clamped + '%';
        }

        // Send value to PHP
        fetch('update_water.php', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: 'waterLevel=' + encodeURIComponent(clamped)
        })
          .then(res => res.text())
          .then(data => console.log('Server says:', data))
          .catch(err => console.error('Error:', err));
      });
    });



    document.addEventListener("keydown", function(event) {
        if (event.key === "Enter") {
            event.preventDefault(); // prevent default Enter behavior
            document.getElementById("publishForm").requestSubmit(); // trigger form submission
        }
    });

    document.getElementById("publishForm").addEventListener("submit", async function(event) {
            event.preventDefault();

            const feedUrl =
            "https://io.adafruit.com/api/v2/Hwng/feeds/soimoilimit/data";
            const header = {
            "X-AIO-Key": "aio_BhJK28B6bY7aIIP5HoId8Y8rnv7Z", // Replace with your Adafruit IO Key
            "Content-Type": "application/json",
          };
            const message = document.getElementById("publishMessage").value;

            const response = await fetch(feedUrl, {
                method: 'POST',
                headers: header,
                body: JSON.stringify({
                    value: message
                })
            });

            const result = await response.json();
            if (response.ok) {
                alert("Message published successfully!");
                location.reload();
            } else {
                alert("Error publishing message: " + result.error);
            }
        });
  </script>
  <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
      crossorigin="anonymous"
    ></script>
    <script>
      const pumpfeedUrl = "https://io.adafruit.com/api/v2/Hwng/feeds/pumps/data"; // Change to your feed name
      const autopumpfeedUrl = "https://io.adafruit.com/api/v2/Hwng/feeds/autopump/data";
      const lightfeedUrl = "https://io.adafruit.com/api/v2/Hwng/feeds/lights/data";
      const headers = {
        "X-AIO-Key": "aio_BhJK28B6bY7aIIP5HoId8Y8rnv7Z", // Replace with your Adafruit IO Key
        "Content-Type": "application/json",
      };

      function sendDataPump(state) {
        const value = !state ? "ON" : "OFF"; // Send "ON" or "OFF" based on toggle state

        fetch(pumpfeedUrl, {
          method: "POST", // Use POST to send data
          headers: headers,
          body: JSON.stringify({ value: value }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to send data");
            }
            return response.json();
          })
          .then((data) => {
            document.getElementById("pumpToggle").innerText = value; // Update status
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function sendDataPumpAuto(state) {
        const value = !state ? "ON" : "OFF"; // Send "ON" or "OFF" based on toggle state

        fetch(autopumpfeedUrl, {
          method: "POST", // Use POST to send data
          headers: headers,
          body: JSON.stringify({ value: value }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to send data");
            }
            return response.json();
          })
          .then((data) => {
            document.getElementById("autopumpToggle").innerText = value; // Update status
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      function sendDataLight(state) {
        const value = !state ? "ON" : "OFF"; // Send "ON" or "OFF" based on toggle state

        fetch(lightfeedUrl, {
          method: "POST", // Use POST to send data
          headers: headers,
          body: JSON.stringify({ value: value }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Failed to send data");
            }
            return response.json();
          })
          .then((data) => {
            document.getElementById("lightToggle").innerText = value; // Update status
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }
    </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
